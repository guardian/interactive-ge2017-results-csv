"use strict";
/**
 * xr (c) James Cleveland 2015
 * URL: https://github.com/radiosilence/xr
 * License: BSD
 */
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var querystring_1 = require("querystring");
var constants_1 = require("./constants");
var defaults = {
    method: constants_1.METHODS.GET,
    data: undefined,
    headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
    },
    dump: JSON.stringify,
    load: JSON.parse,
    xmlHttpRequest: function () { return new XMLHttpRequest(); },
    promise: function (fn) { return new Promise(fn); },
    withCredentials: false,
};
var res = function (xhr, data) { return ({
    status: xhr.status,
    response: xhr.response,
    data: data,
    xhr: xhr,
}); };
var config = __assign({}, defaults);
var configure = function (opts) {
    config = __assign({}, config, opts);
};
var promise = function (args, fn) {
    return ((args && args.promise)
        ? args.promise
        : (config.promise || defaults.promise))(fn);
};
var xr = function (args) {
    return promise(args, function (resolve, reject) {
        var opts = __assign({}, defaults, config, args);
        var xhr = opts.xmlHttpRequest();
        if (opts.abort) {
            args.abort(function () {
                reject(res(xhr));
                xhr.abort();
            });
        }
        if (opts.url === undefined)
            throw new Error('No URL defined');
        xhr.open(opts.method, opts.params
            ? opts.url.split('?')[0] + "?" + querystring_1.encode(opts.params)
            : opts.url, true);
        // setting after open for compatibility with IE versions <=10
        xhr.withCredentials = opts.withCredentials;
        xhr.addEventListener(constants_1.EVENTS.LOAD, function () {
            if (xhr.status >= 200 && xhr.status < 300) {
                var data_1;
                if (xhr.responseText) {
                    data_1 = opts.raw === true
                        ? xhr.responseText
                        : opts.load(xhr.responseText);
                }
                resolve(res(xhr, data_1));
            }
            else {
                reject(res(xhr));
            }
        });
        xhr.addEventListener(constants_1.EVENTS.ABORT, function () { return reject(res(xhr)); });
        xhr.addEventListener(constants_1.EVENTS.ERROR, function () { return reject(res(xhr)); });
        xhr.addEventListener(constants_1.EVENTS.TIMEOUT, function () { return reject(res(xhr)); });
        for (var k in opts.headers) {
            if (!{}.hasOwnProperty.call(opts.headers, k))
                continue;
            xhr.setRequestHeader(k, opts.headers[k]);
        }
        if (opts.events) {
            for (var k in opts.events) {
                if (!{}.hasOwnProperty.call(opts.events, k))
                    continue;
                xhr.addEventListener(k, opts.events[k].bind(null, xhr), false);
            }
        }
        var data = (typeof opts.data === 'object' && !opts.raw)
            ? opts.dump(opts.data)
            : opts.data;
        if (data !== undefined)
            xhr.send(data);
        else
            xhr.send();
    });
};
xr.configure = configure;
xr.Methods = constants_1.METHODS;
xr.Events = constants_1.EVENTS;
xr.get = function (url, params, args) {
    return xr(__assign({ url: url, method: constants_1.METHODS.GET, params: params }, args));
};
xr.put = function (url, data, args) {
    return xr(__assign({ url: url, method: constants_1.METHODS.PUT, data: data }, args));
};
xr.post = function (url, data, args) {
    return xr(__assign({ url: url, method: constants_1.METHODS.POST, data: data }, args));
};
xr.patch = function (url, data, args) {
    return xr(__assign({ url: url, method: constants_1.METHODS.PATCH, data: data }, args));
};
xr.del = function (url, args) {
    return xr(__assign({ url: url, method: constants_1.METHODS.DELETE }, args));
};
xr.options = function (url, args) {
    return xr(__assign({ url: url, method: constants_1.METHODS.OPTIONS }, args));
};
exports.default = xr;
//# sourceMappingURL=xr.js.map